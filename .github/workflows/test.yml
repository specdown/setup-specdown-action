on:
  push:
    branches:
      - '*'
  pull_request:
  workflow_dispatch:

jobs:
  test-latest:
    strategy:
      matrix:
        os:
          - macos-latest
          - windows-latest
          - ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2.4.0
      - uses: ./
      - run: specdown --help

  test-specific-version:
    strategy:
      matrix:
        os:
          - macos-latest
          - windows-latest
          - ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2.4.0
      - uses: ./
        with:
          version: 0.55.5
      - run: specdown --help

  lint-markdown:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.4.0
      - uses: PurpleBooth/gfmfmt-action@v2.0.2

  versio-plan:
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_USER: ${{ github.actor }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
      - uses: chaaz/versio-actions/install@v1.2
      - run: versio check
      - run: versio plan
      - run: versio release --dry-run

  release:
    if: github.ref == 'refs/heads/main'
    needs:
      - test-specific-version
      - test-latest
      - versio-plan
      - lint-markdown
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_USER: ${{ github.actor }}
    outputs:
      version_bump: ${{ steps.version_bump.outputs.version_bump }}
      current_version: ${{ steps.current_version.outputs.current_version }}
      previous_version: ${{ steps.previous_version.outputs.previous_version }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.4.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      - uses: chaaz/versio-actions/install@v1.2
        name: Install versio
      - id: previous_version
        run: echo ::set-output "name=previous_version::$( versio get --id 1 -v )"
      - run: echo ::set-output "name=BUMP::$( versio release --dry-run )"
        id: get_versio_plan
      - name: Generate release
        if: ${{ contains(steps.get_versio_plan.outputs.BUMP, ' -> ') }}
        run: versio release
      - run: echo ::set-output "name=current_version::$( versio get --id 1 -v )"
        id: current_version
      - run: echo ::set-output "name=version_bump::true"
        if: steps.current_version.outputs.current_version != steps.previous_version.outputs.previous_version
        id: version_bump

  upload-release:
    if: needs.release.outputs.version_bump
    needs:
      - release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.4.0
        name: Checkout the repository
        with:
          lfs: true
          fetch-depth: 0
          ref: v${{ needs.release.outputs.current_version }}
      - uses: dlavrenuek/conventional-changelog-action@v1.2.0
        id: changelog
        with:
          from: v${{ needs.release.outputs.previous_version }}
          to: v${{ needs.release.outputs.current_version }}
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: create_release
        uses: ncipollo/release-action@v1.8.10
        with:
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
          body: ${{ steps.changelog.outputs.body }}
          name: Release v${{ needs.release.outputs.current_version }}
          tag: v${{ needs.release.outputs.current_version }}